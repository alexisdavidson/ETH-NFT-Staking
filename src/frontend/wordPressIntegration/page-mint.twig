{% extends "_base.twig" %}

{% block content %}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.7.3/web3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ethers/5.6.2/ethers.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/merkletreejs@latest/merkletree.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/keccak256@latest/keccak256.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/buffer@6.0.3/index.min.js"></script>

	<script type="text/javascript">
		const nftabi = [{"inputs":[{"internalType":"address","name":"teamAddress","type":"address"},{"internalType":"bytes32","name":"_whitelistRoot","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ApprovalCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"ApprovalQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"ApproveToCaller","type":"error"},{"inputs":[],"name":"BalanceQueryForZeroAddress","type":"error"},{"inputs":[],"name":"MintERC2309QuantityExceedsLimit","type":"error"},{"inputs":[],"name":"MintToZeroAddress","type":"error"},{"inputs":[],"name":"MintZeroQuantity","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"OperatorNotAllowed","type":"error"},{"inputs":[],"name":"OwnerQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"OwnershipNotInitializedForExtraData","type":"error"},{"inputs":[],"name":"TransferCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"TransferFromIncorrectOwner","type":"error"},{"inputs":[],"name":"TransferToNonERC721ReceiverImplementer","type":"error"},{"inputs":[],"name":"TransferToZeroAddress","type":"error"},{"inputs":[],"name":"URIQueryForNonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"toTokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"ConsecutiveTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"}],"name":"MintSuccessful","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"amountMintPerAccount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseTokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"contractURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"_proof","type":"bytes32[]"},{"internalType":"bytes32","name":"_leaf","type":"bytes32"}],"name":"isValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"max_supply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"quantity","type":"uint256"},{"internalType":"bytes32[]","name":"_proof","type":"bytes32[]"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"mintEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"publicSaleEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"string","name":"tokenUri","type":"string"}],"name":"replaceUri","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amountMintPerAccount","type":"uint256"}],"name":"setAmountMintPerAccount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_state","type":"bool"}],"name":"setMintEnabled","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"setPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_state","type":"bool"}],"name":"setPublicSaleEnabled","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_whitelistRoot","type":"bytes32"}],"name":"setWhitelistRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"uriSuffix","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"whitelistRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]
		
    const nftaddress = '0x719061eD7E189768a19bf9300E5e40300Fc871ad'; // todo: replace with correct address and abi
		
    let whitelistProof = []
    let isWhitelisted = false
    let nft = null

    const updateWhitelistProof = async(acc, nft) => {
		const whitelistModule = await import('/wp-content/themes/Gelatoversenft-theme/smart-contract/whitelistAddresses.js');
		const whitelistAddresses = whitelistModule.default
		console.log("updateWhitelistProof")
		console.log("whitelistAddresses:")
		console.log(whitelistAddresses)
      
      const accHashed = keccak256(acc)
      const leafNodes = whitelistAddresses.map(addr => keccak256(addr));
      const merkleTree = new MerkleTree(leafNodes, keccak256, { sortPairs: true});
      const hexProof = merkleTree.getHexProof(accHashed);

      console.log("hexProof: ")
      console.log(hexProof);
      console.log("keccak256(acc): ")
      console.log(keccak256(acc))
      const isValid = await nft.isValid(hexProof, accHashed);
      console.log("isValid: " + isValid)

      isWhitelisted = isValid
      whitelistProof = hexProof
    }
    
    const mintFunction = async function() {
			console.log('mintFunction called')

    	const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });

      await updateWhitelistProof(accounts[0], nft)

			console.log("Mint nft...")
			//let priceInWei = await nft.getPrice();
			//console.log("Price: " + priceInWei + " wei");
			//await(await nft.mint({ value: priceInWei })).wait()
      try {
			  await(await nft.mint(1, whitelistProof)).wait()
      }
      catch (error) {
        console.error("Custom error handling: " + error);
        document.getElementById("error-message").innerHTML = "<br/>" + (error.toString()).split('reverted:')[1].split('"')[0];
      };
		};
		
		const updatePrice = async function() {
            const web3 = new Web3(window.ethereum);
            const contract = new web3.eth.Contract(nftabi, nftaddress);

            contract.methods.getNFTPrice().call().then((res) => {
				console.log("current price:" + res)
				$("#current-price").text(Web3.utils.fromWei(web3.utils.toBN(res), 'ether'));
			}).catch((err) => {
				console.log(err);
            });
        }
        // updatePrice();
		
		const loadTotalSupply = async function() {
      console.log("loadTotalSupply")

			const provider = new ethers.providers.Web3Provider(window.ethereum)
			const signer = provider.getSigner()
			
      nft = new ethers.Contract(nftaddress, nftabi, signer)

      const remainingSupply = await nft.totalSupply()
      $("#total-minted").text(remainingSupply);

        console.log(remainingSupply)
      }
      loadTotalSupply();
	</script>

	<div class="content-wrapper-mint3" style="background: black; min-height: 100vh;">
	<div class="container">
	<div class="row">
	<div class="col-12 col-lg-8 offset-lg-2">
		<article class="post-type-{{post.post_type}}" id="post-{{post.ID}}">
			<section class="article-content">
				<div class="article-body">
					{{post.content}}
					<div class="container h-100">
						<div class="row align-items-center h-100">
							<div class="col-12 col-md-6 offset-md-3">
								<div class="section__inner">
									<div class="section__box" style="text-align: center;">
										{# Mint integration #}
										<h3 class="section__title ">MINT</h3>
										<p class="section__cta mb-5">
											<button class="mint btn btn-secondary" onClick="mintFunction()">
												<span style="fontSize: 35px;">MINT NOW</span> 
												<!-- <br/> <span id="current-price" style="fontSize: 20px;">?</span> ETH -->
											</button>
											<br/>
											Click Buy to mint your NFT.
                      <span id="error-message" style="color: red;"></span>
										</p>
										<p class="section__cta mt-5">
											Total Minted
											<br/><span class="btn btn-dark disabled" style="minWidth: 200px; fontSize: 20px;"> 
												<span id="total-minted">?</span>/ 9941
											</span>
										</p>
										<p className="mt-5" style="color: gray;">
											Please make sure that you are connected to the right network (Ethereum Mainnet). Please note: Once you make the purchase, you cannot undo it.
										</p>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</section>
		</article>
	</div>
	</div>
	</div><!-- /content-wrapper -->
{% endblock %}