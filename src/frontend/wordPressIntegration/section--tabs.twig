{% extends "_base.twig" %}

{% block content %}

<script src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.7.3/web3.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/ethers/5.6.2/ethers.umd.min.js"></script>

<script type="text/javascript">

    const nftabi = [{"inputs":[{"internalType":"address","name":"teamAddress","type":"address"},{"internalType":"bytes32","name":"_whitelistRoot","type":"bytes32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ApprovalCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"ApprovalQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"ApproveToCaller","type":"error"},{"inputs":[],"name":"BalanceQueryForZeroAddress","type":"error"},{"inputs":[],"name":"MintERC2309QuantityExceedsLimit","type":"error"},{"inputs":[],"name":"MintToZeroAddress","type":"error"},{"inputs":[],"name":"MintZeroQuantity","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"OperatorNotAllowed","type":"error"},{"inputs":[],"name":"OwnerQueryForNonexistentToken","type":"error"},{"inputs":[],"name":"OwnershipNotInitializedForExtraData","type":"error"},{"inputs":[],"name":"TransferCallerNotOwnerNorApproved","type":"error"},{"inputs":[],"name":"TransferFromIncorrectOwner","type":"error"},{"inputs":[],"name":"TransferToNonERC721ReceiverImplementer","type":"error"},{"inputs":[],"name":"TransferToZeroAddress","type":"error"},{"inputs":[],"name":"URIQueryForNonexistentToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"toTokenId","type":"uint256"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"ConsecutiveTransfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"user","type":"address"}],"name":"MintSuccessful","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"amountMintPerAccount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"baseTokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"contractURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"_proof","type":"bytes32[]"},{"internalType":"bytes32","name":"_leaf","type":"bytes32"}],"name":"isValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"max_supply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"quantity","type":"uint256"},{"internalType":"bytes32[]","name":"_proof","type":"bytes32[]"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"mintEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"price","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"publicSaleEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"string","name":"tokenUri","type":"string"}],"name":"replaceUri","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amountMintPerAccount","type":"uint256"}],"name":"setAmountMintPerAccount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_state","type":"bool"}],"name":"setMintEnabled","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_price","type":"uint256"}],"name":"setPrice","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"_state","type":"bool"}],"name":"setPublicSaleEnabled","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_whitelistRoot","type":"bytes32"}],"name":"setWhitelistRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"uriSuffix","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"whitelistRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}]
    const tokenabi = [{"inputs":[{"internalType":"address[]","name":"_minterAddresses","type":"address[]"},{"internalType":"uint256[]","name":"_tokenAmount","type":"uint256[]"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]
    const nftstakerabi = [{"inputs":[{"internalType":"address","name":"nftAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"StakeSuccessful","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"}],"name":"UnstakeSuccessful","type":"event"},{"inputs":[],"name":"claimReward","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getRewardFromActiveMission","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getRewardToClaim","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getStakedMissions","outputs":[{"components":[{"internalType":"uint256","name":"startTimestamp","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"internalType":"struct NFTStaker.Mission[]","name":"missions","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getStakedTimestamps","outputs":[{"internalType":"uint256[]","name":"timestamps","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_user","type":"address"}],"name":"getStakedTokens","outputs":[{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"hoursForUnitReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"isMissionOngoing","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"isTokenStaked","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"parentNFT","outputs":[{"internalType":"contract ERC721A","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardsToken","outputs":[{"internalType":"contract ERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_tokenIds","type":"uint256[]"}],"name":"sendAllInactiveToMission","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_newOwner","type":"address"},{"internalType":"address","name":"_tokenAddress","type":"address"}],"name":"setOwnerAndTokenAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"stake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_duration","type":"uint256"}],"name":"startMission","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"unstake","outputs":[],"stateMutability":"nonpayable","type":"function"}]

    // const nftaddress = '0xF158bec5cf689b8BaaBa239B7d28f5A62D6200bc'; // Goerli
    // const nftstakeraddress = '0xfB4D6ab5E228154B8a0357a2306cA9cc8faa31F4'; // Goerli
    // const tokenaddress = '0xad635a9Aa0e1aDE3472ECF297a53FA4399bA927B'; // Goerli
    // const urlApi = 'https://testnets-api.opensea.io/api/v1' // Testnet Goerli
    
    const nftaddress = '0x719061eD7E189768a19bf9300E5e40300Fc871ad'; // Mainnet
    const nftstakeraddress = '0xd9e4B6Ed2c927ec2647558388530f3b85aBA57DA'; // Mainnet
    const tokenaddress = '0xe0273463e75163a179b060fFf67B701eA793ea15'; // Mainnet
    const urlApi = 'https://api.opensea.io/api/v1' // Mainnet

    const fromWei = (num) => ethers.utils.formatEther(num)
    let accounts = [];
    let provider = null;
    let signer = null;
    let token = null;
    let nftstaker = null;
    let nft = null;
    let isMissionOngoing = false;
    let tokenIdsToStakeBatch = []
    let hoursForUnitReward = 4
    let sumRewards = 0
    let tokensToClaim = 0
    let currentCursor = null
    let next = null
    let previous = null

    
    function timeout(delay) {
      return new Promise( res => setTimeout(res, delay) );
    }

    const clickNext = async function () { refresh(next) }
    const clickPrevious = async function () { refresh(previous) }
    const generateNextPreviousHtml = () => {
      const startPageLinkHtml = `<button class='btn btn-secondary' style='margin: 0; margin-bottom: 30px; margin-right: 20px;' `
      let finalHtml = '<div>'

      if (previous) {
        finalHtml += startPageLinkHtml + "onclick='clickPrevious()'>Previous</button>"
      }
      if (next) {
        if (previous)
          finalHtml += " "
        finalHtml += startPageLinkHtml + "onclick='clickNext()'>Next</button>"
      }
      finalHtml += '</div>'

      document.getElementById("next-previous-container").innerHTML = finalHtml
    }

    const refresh = async function (cursor) {
      console.log("refresh, cursor: " + cursor)

      if (cursor != null)
        currentCursor = cursor

      const loadingHtml = 'Loading...'
      document.getElementById("items-container-opensea").innerHTML = loadingHtml
      document.getElementById("items-container-mission").innerHTML = loadingHtml
      document.getElementById("items-container-hq").innerHTML = loadingHtml
      document.getElementById("next-previous-container").innerHTML = ''
      $("#token-balance").text(loadingHtml);
      $("#token-unclaimed").text(loadingHtml);
      // $("#token-rewards").text(loadingHtml);

      await updateBalance();
      await updateIsMissionOngoing();
      await createOpenseaCards();
      await createStakedCards();
    }

    
    const initializeContracts = async function() {
      accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
      provider = new ethers.providers.Web3Provider(window.ethereum)
      signer = provider.getSigner()
      token = new ethers.Contract(tokenaddress, tokenabi, signer)
      nftstaker = new ethers.Contract(nftstakeraddress, nftstakerabi, signer)
      nft = new ethers.Contract(nftaddress, nftabi, signer)

      await refresh();
    }

      const updateBalance = async function() {
        console.log("updateBalance...");
        console.log("account: " + accounts[0]);
        try {
          const balance = await token.balanceOf(accounts[0]);
          console.log("balance: " + balance);
          $("#token-balance").text(Math.floor(balance));
        }
        catch(error) {
          console.log("updateBalance " + error)
          $("#token-balance").text("error");
        }
      }

      const updateIsMissionOngoing = async function() {
        console.log("updateIsMissionOngoing...");
        try {
          isMissionOngoing = await nftstaker.isMissionOngoing();
          hoursForUnitReward = await nftstaker.hoursForUnitReward();
          tokensToClaim = await nftstaker.getRewardToClaim(accounts[0]);
          console.log("isMissionOngoing: " + isMissionOngoing);
          console.log("hoursForUnitReward: " + hoursForUnitReward);
          console.log("tokensToClaim: " + tokensToClaim);
          $("#token-unclaimed").text(Math.floor(tokensToClaim));
        }
        catch(error) {
          console.log("updateIsMissionOngoing " + error)
        }
      }

      const createCardHtml = async (token_id, name, image, isStaked) => {
        const stakeUnstakeText = isStaked ? "Send home" : "Start Mission"
        const button = (isMissionOngoing || isStaked) ? 
          `<button class="mint btn btn-secondary" style="margin: 0;"
              onClick="stakeUnstakeFunction(${token_id}, ${isStaked})">
                ${stakeUnstakeText}
            </button>` 
        : 
          `<button class="mint btn btn-secondary" style="margin: 0; background-color: gray;">
              ${stakeUnstakeText}
            </button>` 
          
        let cardHtml = `<div class="col-12 col-md-6 col-lg-4 col-xl-3">
                            <div class="section__box">
                                <div class="featured-image">
                                    <img class="img-fluid d-block"
                                          src="${image}"
                                          alt=""/>
                                </div>
                                <p class="section__lead">${name}</p>
                                <p class="section__cta">
                                  ${button}
                                </p>

                            </div>
                        </div>`
        return cardHtml
      }

      const loadOpenSeaItems = async () => {
        console.log("loadOpenSeaItems...");
        let finalUrl = `${urlApi}/assets?owner=${accounts[0]}&asset_contract_address=${nftaddress}`
        if (currentCursor)
          finalUrl += "&cursor=" + currentCursor
        finalUrl += '&format=json'
        console.log("Sending api call for items to " + finalUrl)

        let res = await fetch(finalUrl)
        .then((res) => res.json())
        .then((res) => {
          return res
        })
        .catch((e) => {
          console.error(e)
          console.error('Could not talk to OpenSea')
          return null
        })

        previous = res.previous
        next = res.next
        items = res.assets
        if (items == null || items == undefined)
          items = []

        console.log("OpenSea items loaded: ");
        console.log(items);

        generateNextPreviousHtml()

        return items
      }

      const loadStakedItems = async () => {
        let items = []
        let itemsOpenSea = []
        
        sumRewards = 0
        
        let tokenIds = await nftstaker.getStakedTokens(accounts[0])
        let stakedMissions = await nftstaker.getStakedMissions(accounts[0])
        let tokenIdsDecimal = []
        for(i = 0; i < tokenIds.length; i ++) {
            tokenIdsDecimal.push(tokenIds[i].toString())
            // console.log("FromWei: " + tokenIdsDecimal[i])
        }
        console.log("tokenIdsDecimal from Staker: ")
        console.log(tokenIdsDecimal)

        if(tokenIdsDecimal.length > 0) {
          let finalUrl = `${urlApi}/assets?asset_contract_address=${nftaddress}`
        
          for(i = 0; i < tokenIdsDecimal.length; i ++) {
            finalUrl += "&token_ids=" + tokenIdsDecimal[i]
          }
          finalUrl += `&format=json`
          console.log("Sending api call for items to " + finalUrl)
          await timeout(1000);
          
          try {
            itemsOpenSea = await fetch(finalUrl)
            .then((res) => res.json())
            .then((res) => {
              return res.assets
            })
            .catch((e) => {
              console.error(e)
              console.error('Could not talk to OpenSea')
              return null
            })
          } catch(error) {
            console.log("nftstaker.staked opensea error: " + error)
          }

        }
        
        if (itemsOpenSea == undefined || itemsOpenSea == null)
          itemsOpenSea = []
        if (stakedMissions == undefined || stakedMissions == null)
          stakedMissions = []
        
        console.log("Missions: ")
        for(i = 0; i < stakedMissions.length; i++) {
          const missionObject = {
            startTimestamp: parseInt(stakedMissions[i][0].toString()),
            duration: parseInt(stakedMissions[i][1].toString())
          }

          items.push({mission: missionObject})
          items[items.length - 1].token_id = tokenIdsDecimal[i]
          items[items.length - 1].name = "Gelato #" + tokenIdsDecimal[i]

          for (let j = 0; j < itemsOpenSea.length; j ++) {
            if (itemsOpenSea[j].token_id == items[items.length - 1].token_id)
              items[items.length - 1].image_url = itemsOpenSea[j].image_url
          }

          // console.log(items[i].mission)

          // sumRewards += Math.floor(Math.floor(stakedMissions[i][1] / 3600) / hoursForUnitReward)
          // console.log("sumRewards:")
          // console.log(sumRewards)
        }
        // sumRewards = Math.round(sumRewards)
        sumRewards = await nftstaker.getRewardFromActiveMission(accounts[0])
        // $("#token-rewards").text((sumRewards));

        console.log("Staked items loaded: ");
        console.log(items);
        
        return items
      }

      const createOpenseaCards = async () => {
        let openSeaItems = await loadOpenSeaItems();
        let cardsHtml = ""
        
        console.log("createOpenseaCards")
        console.log(accounts[0])
        if (openSeaItems != null && openSeaItems.length > 0) {
          for(i = 0; i < openSeaItems.length; i ++) {
            const isStacked = await nft.ownerOf(openSeaItems[i]?.token_id)
            // console.log("isStacked: " + isStacked)
            if (isStacked.toLowerCase() == accounts[0].toLowerCase())
              cardsHtml += await createCardHtml(openSeaItems[i]?.token_id, openSeaItems[i]?.name, openSeaItems[i]?.image_url, false)
          }
        } 
        else
          cardsHtml += "<p>You don’t have any Gelato to send on a mission! Buy more coward!</p>"
        
        document.getElementById("items-container-opensea").innerHTML = cardsHtml
      }

      const createStakedCards = async () => {
        const stakedItems = await loadStakedItems();
        await new Promise(r => setTimeout(r, 2000));

        const currentTimestamp = await getCurrentTimestamp()
        await createHqCards(stakedItems, currentTimestamp);
        await createMissionCards(stakedItems, currentTimestamp);
      }
      
      const getCurrentTimestamp = async () => {
        console.log("getCurrentTimestamp")
        const currentBlock = await provider.getBlockNumber();
        let currentTimestamp = (await provider.getBlock(currentBlock)).timestamp;

        console.log(currentTimestamp)
        return parseInt(currentTimestamp)
      }
      
      const createHqCards = async (stakedItems, currentTimestamp) => {
        let cardsHtml = ""
        
        let atLeastOneMissionOver = false
        tokenIdsToStakeBatch = []
        if (stakedItems != null && stakedItems.length > 0) {
          for(i = 0; i < stakedItems.length; i ++) {
            const isMissionOver = stakedItems[i].mission == null || currentTimestamp > stakedItems[i].mission.startTimestamp + stakedItems[i].mission.duration
            if (isMissionOver) {
              atLeastOneMissionOver = true
              tokenIdsToStakeBatch.push(stakedItems[i].token_id)
              cardsHtml += await createCardHtml(stakedItems[i]?.token_id, stakedItems[i]?.name, stakedItems[i]?.image_url, true)
            }
          }
        }

        if (!atLeastOneMissionOver) {
          cardsHtml += "<p>You currently don't have any Gelato NFTs in HQ</p>"
        }

        document.getElementById("items-container-hq").innerHTML = cardsHtml

        // Start mission button for batch
        const button = isMissionOngoing ? 
          `<button class="mint btn btn-secondary" onClick="stakeBatch()">
              Start Mission
            </button>
            `
        : 
          `<button class="mint btn btn-secondary" style="background-color: gray;">
              Start Mission
            </button>` 
          
        document.getElementById("start-mission-batch").innerHTML = button
      }

      const createMissionCards = async (stakedItems, currentTimestamp) => {
        let cardsHtml = ""
        
        let atLeastOneMissionOnGoing = false
        if (stakedItems != null && stakedItems.length > 0) {
          for(i = 0; i < stakedItems.length; i ++) {
            const isMissionOver = stakedItems[i].mission == null || currentTimestamp > stakedItems[i].mission.startTimestamp + stakedItems[i].mission.duration
            if (!isMissionOver) {
              atLeastOneMissionOnGoing = true
              cardsHtml += await createCardHtml(stakedItems[i]?.token_id, stakedItems[i]?.name, stakedItems[i]?.image_url, true)
            }
          }
        }
        
        if (!atLeastOneMissionOnGoing) {
          cardsHtml += "<p>You currently don't have a Gelato NFT in a mission.</p>"
        }

        document.getElementById("items-container-mission").innerHTML = cardsHtml
      }

    initializeContracts();
    
    const claimReward = async () => {
      console.log(claimReward)
      try {
        await nftstaker.claimReward()
      } catch (error) {
        console.error("Custom error handling: " + error);
      }
    }

    const stakeUnstakeFunction = async function(token_id, isStaked) {
      console.log('stakeUnstakeFunction called ' + token_id)
      try {
        if (!isStaked) {
          console.log("isApprovedForAll " + accounts[0] + " " + nftstakeraddress);
          if ((await nft.isApprovedForAll(accounts[0], nftstakeraddress)) != true) {
            console.log("Set approval for all");
            await(await nft.setApprovalForAll(nftstakeraddress, true)).wait()
          }
          console.log("Stake nft...")
          await nftstaker.stake(token_id)
        } else {
          console.log("Unstake nft...")
          await nftstaker.unstake(token_id)
        }
      } catch (error) {
        console.error("Custom error handling: " + error);
        document.getElementById("items-container-opensea").innerHTML = error
      }
    }

    const stakeBatch = async () => {
      console.log("stakeBatch")
      console.log(tokenIdsToStakeBatch)

      try {
        if (tokenIdsToStakeBatch.length > 0) {
          await nftstaker.sendAllInactiveToMission(tokenIdsToStakeBatch)
        }
      } catch (error) {
        console.error("Custom error handling: " + error);
        document.getElementById("items-container-hq").innerHTML = error
      }
    }
</script>

<div class="section section--tabs hide" id="tabs">
    <div class="container h-100">
        <div class="section__inner">
            <div class="row align-items-center h-100">
                <div class="col-12">
                    <div class="section__close row">
                      <div class="col-6">
                        <div style="text-align: left; margin-left: 2rem; margin-top: 2rem; ">
                          <button class="btn btn-secondary" style="margin: 0;" onClick="refresh()">
                            Refresh
                          </button>
                        </div>
                      </div>
                      <div class="col-6">
                        <button id="" class="point-close"><i class="fas fa-times"></i></button>
                      </div>
                    </div>
                    <h3 class="section__title">Missions</h3>
                    <p class="lead"></p>
                </div>
            </div>
            <div class="row align-items-center h-100">
                <div class="col-12">
                    <nav>
                        <div class="nav nav-tabs" id="nav-tab" role="tablist">
                            <button class="nav-link active" id="nav-recruitment-tab" data-bs-toggle="tab"
                                    data-bs-target="#nav-recruitment" type="button" role="tab"
                                    aria-controls="nav-recruitment" aria-selected="true">Recruitment
                            </button>
                            <button class="nav-link" id="nav-hq-tab" data-bs-toggle="tab" data-bs-target="#nav-hq"
                                    type="button" role="tab" aria-controls="nav-hq" aria-selected="false">HQ
                            </button>
                            <button class="nav-link" id="nav-mission-tab" data-bs-toggle="tab"
                                    data-bs-target="#nav-mission" type="button" role="tab" aria-controls="nav-mission"
                                    aria-selected="false">Mission
                            </button>
                            <button class="nav-link" id="nav-rewards-tab" data-bs-toggle="tab"
                                    data-bs-target="#nav-rewards" type="button" role="tab" aria-controls="nav-rewards"
                                    aria-selected="false">Rewards
                            </button>
                        </div>
                    </nav>
                    <div class="tab-content" id="nav-tabContent">
                        <div class="tab-pane fade show active" id="nav-recruitment" role="tabpanel"
                             aria-labelledby="nav-recruitment-tab">
                            <div class="row align-items-center h-100" id="next-previous-container">
                            </div>
                            <div class="row align-items-center h-100" id="items-container-opensea">
                              Loading ...
                                {# {% for i in 0..3 %}
                                    <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                                        <div class="section__box">
                                            <div class="featured-image">
                                                <img class="img-fluid d-block"
                                                     src="https://gelatoversenft.com/wp-content/uploads/2021/12/Mango-1080x1080-c-default.png"
                                                     alt=""/>
                                            </div>
                                            <p class="section__lead"><span>Gelato</span>#9941</p>
                                            <p class="section__cta"><a href="/" target=""
                                                                       class="btn btn-secondary">Start Mission</a>
                                            </p>

                                        </div>
                                    </div>
                                {% endfor %} #}

                            </div>
                        </div>
                        <div class="tab-pane fade" id="nav-hq" role="tabpanel" aria-labelledby="nav-hq-tab">
                            <div class="row align-items-center h-100">
                                <div class="col-12">
                                    <p class="section__lead">Here you can see your inactive but recruited gelatos. Send
                                        them home to trade them or send them all on a new mission. </p>
                                </div>
                            </div>
                            <div class="row align-items-center h-100" id="items-container-hq">
                              Loading ...
                                {# {% for i in 0..3 %}
                                    <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                                        <div class="section__box">
                                            <div class="featured-image">
                                                <img class="img-fluid d-block"
                                                     src="https://gelatoversenft.com/wp-content/uploads/2021/12/Mango-1080x1080-c-default.png"
                                                     alt=""/>
                                            </div>
                                            <p class="section__lead"><span>Gelato</span>#9941</p>
                                            <p class="section__cta"><a href="/" target=""
                                                                       class="btn btn-secondary">Send Home</a>
                                            </p>

                                        </div>
                                    </div>
                                {% endfor %} #}
                            </div>
                            <div class="row align-items-center h-100">
                                <div class="col-12">
                                    <p class="section__cta" id="start-mission-batch">
                                    </p>
                                </div>
                            </div>

                        </div>
                        <div class="tab-pane fade" id="nav-mission" role="tabpanel" aria-labelledby="nav-mission-tab">
                            <div class="row align-items-center h-100">
                                <div class="col-12">
                                    <p class="section__lead">Here you can see your heroes who are actively participating
                                        in a mission! </p>
                                </div>
                            </div>
                            <div class="row align-items-center h-100" id="items-container-mission">
                              Loading ...
                                {# {% for i in 0..3 %}
                                    <div class="col-12 col-md-6 col-lg-4 col-xl-3">
                                        <div class="section__box">
                                            <div class="featured-image">
                                                <img class="img-fluid d-block"
                                                     src="https://gelatoversenft.com/wp-content/uploads/2021/12/Mango-1080x1080-c-default.png"
                                                     alt=""/>
                                            </div>
                                            <p class="section__lead"><span>Gelato</span>#9941</p>
                                            <p class="section__cta"><a href="/" target=""
                                                                       class="btn btn-secondary">Send Home</a>
                                            </p>

                                        </div>
                                    </div>
                                {% endfor %} #}
                            </div>
                        </div>
                        <div class="tab-pane fade" id="nav-rewards" role="tabpanel" aria-labelledby="nav-rewards-tab">

                            {# <div class="row align-items-center h-100">
                                <div class="col-3 col-lg-1 offset-0 offset-lg-2">
                                    <div class="featured-image">
                                        <img class="img-fluid d-block"
                                             src="/wp-content/themes/Gelatoversenft-theme/dist/img/Gelatoverse_Beach_Coin.png"
                                             alt=""/>
                                    </div>
                                </div>
                                <div class="col-9 col-lg-6">
                                    <div class="section__box"><p class="lead">Rewards from Active Mission</p>
                                        <span id="token-rewards">700</span></div>
                                </div>
                            </div> #}
                            <div class="row align-items-center h-100">
                                <div class="col-3 col-lg-1 offset-0 offset-lg-2">
                                    <div class="featured-image">
                                        <img class="img-fluid d-block"
                                             src="/wp-content/themes/Gelatoversenft-theme/dist/img/Gelatoverse_Beach_Coin.png"
                                             alt=""/>
                                    </div>
                                </div>

                                <div class="col-9 col-lg-6">
                                    <div class="section__box"><p class="lead">Unclaimed Beach Coin</p><span id="token-unclaimed">0</span>
                                    </div>
                                </div>
                            </div>
                            <div class="row align-items-center h-100">
                                <div class="col-3 col-lg-1 offset-0 offset-lg-2">
                                    <div class="featured-image">
                                        <img class="img-fluid d-block"
                                             src="/wp-content/themes/Gelatoversenft-theme/dist/img/Gelatoverse_Beach_Coin.png"
                                             alt=""/>
                                    </div>
                                </div>

                                <div class="col-9 col-lg-6">
                                    <div class="section__box"><p class="lead">Claimed Beach Coin</p><span id="token-balance" style="fontSize: 20px;">700</span>
                                    </div>
                                </div>
                            </div>

                            <div class="row align-items-center h-100">
                                <div class="col-12">
                                    <p class="section__cta">
                                      <button class="mint btn btn-secondary" onClick="claimReward()">
                                            Claim All
                                      </button>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>


        </div>
    </div>
</div>
</div>
</div>
{% endblock %}